"""init_new_database

Revision ID: 8902c8025f3b
Revises:
Create Date: 2025-10-29 13:41:32.750792

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "8902c8025f3b"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "agent",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("avatar", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("tags", sa.JSON(), nullable=True),
        sa.Column("model", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("temperature", sa.Float(), nullable=True),
        sa.Column("prompt", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("require_tool_confirmation", sa.Boolean(), nullable=False),
        sa.Column("provider_id", sa.Uuid(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_agent_id"), "agent", ["id"], unique=False)
    op.create_index(op.f("ix_agent_provider_id"), "agent", ["provider_id"], unique=False)
    op.create_index(op.f("ix_agent_user_id"), "agent", ["user_id"], unique=False)
    op.create_table(
        "agentmcpserverlink",
        sa.Column("agent_id", sa.Uuid(), nullable=False),
        sa.Column("mcp_server_id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("agent_id", "mcp_server_id"),
    )
    op.create_index(op.f("ix_agentmcpserverlink_agent_id"), "agentmcpserverlink", ["agent_id"], unique=False)
    op.create_index(op.f("ix_agentmcpserverlink_mcp_server_id"), "agentmcpserverlink", ["mcp_server_id"], unique=False)
    op.create_table(
        "consumerecord",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("auth_provider", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("sku_id", sa.Integer(), nullable=True),
        sa.Column("scene", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("session_id", sa.Uuid(), nullable=True),
        sa.Column("topic_id", sa.Uuid(), nullable=True),
        sa.Column("message_id", sa.Uuid(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("consume_state", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("remote_error", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("remote_response", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("biz_no", sa.Integer(), autoincrement=True, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_consumerecord_auth_provider"), "consumerecord", ["auth_provider"], unique=False)
    op.create_index(op.f("ix_consumerecord_biz_no"), "consumerecord", ["biz_no"], unique=True)
    op.create_index(op.f("ix_consumerecord_id"), "consumerecord", ["id"], unique=False)
    op.create_index(op.f("ix_consumerecord_user_id"), "consumerecord", ["user_id"], unique=False)
    op.create_table(
        "mcpserver",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tools", sa.JSON(), nullable=True),
        sa.Column("last_checked_at", sa.DateTime(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_mcpserver_id"), "mcpserver", ["id"], unique=False)
    op.create_index(op.f("ix_mcpserver_name"), "mcpserver", ["name"], unique=False)
    op.create_index(op.f("ix_mcpserver_status"), "mcpserver", ["status"], unique=False)
    op.create_index(op.f("ix_mcpserver_user_id"), "mcpserver", ["user_id"], unique=False)
    op.create_table(
        "message",
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("topic_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_message_id"), "message", ["id"], unique=False)
    op.create_index(op.f("ix_message_topic_id"), "message", ["topic_id"], unique=False)
    op.create_table(
        "provider",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("provider_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("api", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("timeout", sa.Integer(), nullable=False),
        sa.Column("model", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("max_tokens", sa.Integer(), nullable=False),
        sa.Column("temperature", sa.Float(), nullable=False),
        sa.Column("is_system", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_provider_id"), "provider", ["id"], unique=False)
    op.create_index(op.f("ix_provider_is_system"), "provider", ["is_system"], unique=False)
    op.create_index(op.f("ix_provider_name"), "provider", ["name"], unique=False)
    op.create_index(op.f("ix_provider_provider_type"), "provider", ["provider_type"], unique=False)
    op.create_index(op.f("ix_provider_user_id"), "provider", ["user_id"], unique=False)
    op.create_table(
        "session",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("agent_id", sa.Uuid(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_session_agent_id"), "session", ["agent_id"], unique=False)
    op.create_index(op.f("ix_session_id"), "session", ["id"], unique=False)
    op.create_index(op.f("ix_session_user_id"), "session", ["user_id"], unique=False)
    op.create_table(
        "tool",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("tags_json", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "name", name="uq_user_tool_name"),
    )
    op.create_index(op.f("ix_tool_name"), "tool", ["name"], unique=False)
    op.create_index(op.f("ix_tool_user_id"), "tool", ["user_id"], unique=False)
    op.create_table(
        "toolfunction",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("function_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("docstring", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("input_schema", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("output_schema", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tool_version_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_toolfunction_tool_version_id"), "toolfunction", ["tool_version_id"], unique=False)
    op.create_index(op.f("ix_toolfunction_user_id"), "toolfunction", ["user_id"], unique=False)
    op.create_table(
        "toolversion",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("requirements", sa.Text(), nullable=True),
        sa.Column("code_content", sa.Text(), nullable=True),
        sa.Column("status", sa.Enum("BUILDING", "READY", "FAILED", "DEPRECATED", name="toolstatus"), nullable=False),
        sa.Column("tool_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_toolversion_status"), "toolversion", ["status"], unique=False)
    op.create_index(op.f("ix_toolversion_tool_id"), "toolversion", ["tool_id"], unique=False)
    op.create_index(op.f("ix_toolversion_user_id"), "toolversion", ["user_id"], unique=False)
    op.create_index(op.f("ix_toolversion_version"), "toolversion", ["version"], unique=False)
    op.create_table(
        "topic",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("session_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_topic_id"), "topic", ["id"], unique=False)
    op.create_index(op.f("ix_topic_session_id"), "topic", ["session_id"], unique=False)
    op.create_table(
        "userconsumesummary",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("auth_provider", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("total_amount", sa.BigInteger(), nullable=False),
        sa.Column("total_count", sa.Integer(), nullable=False),
        sa.Column("success_count", sa.Integer(), nullable=False),
        sa.Column("failed_count", sa.Integer(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_userconsumesummary_auth_provider"), "userconsumesummary", ["auth_provider"], unique=False)
    op.create_index(op.f("ix_userconsumesummary_id"), "userconsumesummary", ["id"], unique=False)
    op.create_index(op.f("ix_userconsumesummary_user_id"), "userconsumesummary", ["user_id"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_userconsumesummary_user_id"), table_name="userconsumesummary")
    op.drop_index(op.f("ix_userconsumesummary_id"), table_name="userconsumesummary")
    op.drop_index(op.f("ix_userconsumesummary_auth_provider"), table_name="userconsumesummary")
    op.drop_table("userconsumesummary")
    op.drop_index(op.f("ix_topic_session_id"), table_name="topic")
    op.drop_index(op.f("ix_topic_id"), table_name="topic")
    op.drop_table("topic")
    op.drop_index(op.f("ix_toolversion_version"), table_name="toolversion")
    op.drop_index(op.f("ix_toolversion_user_id"), table_name="toolversion")
    op.drop_index(op.f("ix_toolversion_tool_id"), table_name="toolversion")
    op.drop_index(op.f("ix_toolversion_status"), table_name="toolversion")
    op.drop_table("toolversion")
    op.drop_index(op.f("ix_toolfunction_user_id"), table_name="toolfunction")
    op.drop_index(op.f("ix_toolfunction_tool_version_id"), table_name="toolfunction")
    op.drop_table("toolfunction")
    op.drop_index(op.f("ix_tool_user_id"), table_name="tool")
    op.drop_index(op.f("ix_tool_name"), table_name="tool")
    op.drop_table("tool")
    op.drop_index(op.f("ix_session_user_id"), table_name="session")
    op.drop_index(op.f("ix_session_id"), table_name="session")
    op.drop_index(op.f("ix_session_agent_id"), table_name="session")
    op.drop_table("session")
    op.drop_index(op.f("ix_provider_user_id"), table_name="provider")
    op.drop_index(op.f("ix_provider_provider_type"), table_name="provider")
    op.drop_index(op.f("ix_provider_name"), table_name="provider")
    op.drop_index(op.f("ix_provider_is_system"), table_name="provider")
    op.drop_index(op.f("ix_provider_id"), table_name="provider")
    op.drop_table("provider")
    op.drop_index(op.f("ix_message_topic_id"), table_name="message")
    op.drop_index(op.f("ix_message_id"), table_name="message")
    op.drop_table("message")
    op.drop_index(op.f("ix_mcpserver_user_id"), table_name="mcpserver")
    op.drop_index(op.f("ix_mcpserver_status"), table_name="mcpserver")
    op.drop_index(op.f("ix_mcpserver_name"), table_name="mcpserver")
    op.drop_index(op.f("ix_mcpserver_id"), table_name="mcpserver")
    op.drop_table("mcpserver")
    op.drop_index(op.f("ix_consumerecord_user_id"), table_name="consumerecord")
    op.drop_index(op.f("ix_consumerecord_id"), table_name="consumerecord")
    op.drop_index(op.f("ix_consumerecord_biz_no"), table_name="consumerecord")
    op.drop_index(op.f("ix_consumerecord_auth_provider"), table_name="consumerecord")
    op.drop_table("consumerecord")
    op.drop_index(op.f("ix_agentmcpserverlink_mcp_server_id"), table_name="agentmcpserverlink")
    op.drop_index(op.f("ix_agentmcpserverlink_agent_id"), table_name="agentmcpserverlink")
    op.drop_table("agentmcpserverlink")
    op.drop_index(op.f("ix_agent_user_id"), table_name="agent")
    op.drop_index(op.f("ix_agent_provider_id"), table_name="agent")
    op.drop_index(op.f("ix_agent_id"), table_name="agent")
    op.drop_table("agent")
    # ### end Alembic commands ###
